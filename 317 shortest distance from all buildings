class Solution {
public:
    int shortestDistance(vector<vector<int>>&grid) {
        int result;
        int m=grid.size(),n=grid[0].size();
        int increment[]={0,1,0,-1,0};
        int mindist;
        int current=0;
        int  totaldist[m][n]={};
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                
                if(grid[i][j]==1){//this is a building
             int dist[m][n]={};//this grid records the distance of all land from this building
                
                mindist=INT_MAX;
                queue<pair<int,int>> q;
                q.push(make_pair(i,j));
                while(!q.empty()){
                    pair<int,int> node=q.front();
                    q.pop();
                    for(int k=0;k<4;k++){
                        int x=node.first+increment[k];
                        int y=node.second+increment[k+1];
                        if(x>=0&&x<m&&y>=0&&y<n&&grid[x][y]==current){
                            grid[x][y]--;
                            q.push(make_pair(x,y));
                            dist[x][y]=dist[node.first][node.second]+1;
                            totaldist[x][y]+=dist[x][y];
                            mindist=min(mindist,totaldist[x][y]);
                        }
                    }
                }
                current--;
                }
                
            }
        }
        
     return mindist==INT_MAX?-1:mindist;   
    }
};
